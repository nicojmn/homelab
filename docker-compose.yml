services:
  traefik:
    image: "traefik:v3.1"
    container_name: "traefik"
    restart: always
    command:
      # - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
    environment:
      - TZ=Europe/Brussels
    ports:
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock"
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.auth.basicauth.users=${TFK_USER}"
      - "traefik.http.routers.api.rule=Host(`traefik.${DOMAIN}`)" # Replace with your dashboard domain
      - "traefik.http.routers.api.entrypoints=websecure" # Use HTTPS for the dashboard
      #- "traefik.http.routers.api.entrypoints=web" # debug
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=myresolver" # Link to the ACME resolver
      - "traefik.http.routers.api.middlewares=auth" # Apply basic auth middleware
    networks:
      - external

  focalboard:
    image: mattermost/focalboard:edge
    container_name: "focalboard"
    restart: unless-stopped
    depends_on: 
        - focalboard-db
    expose:
      - 8000
    environment:
      - VIRTUAL_HOST=localhost
      - VIRTUAL_PORT=8000
      - VIRTUAL_PROTO=http
      - TZ=Europe/Brussels
    volumes:
      - ${DATA_DIR}/focalboard/config.json:/opt/focalboard/config.json 
      - ${DATA_DIR}/fbdata:/opt/focalboard/data:rw 
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.boards.rule=Host(`boards.${DOMAIN}`)"
      - "traefik.http.routers.boards.entrypoints=websecure"
      - "traefik.http.routers.boards.tls.certresolver=myresolver"
      - "traefik.http.middlewares.auth.basicauth.users=${TFK_USER}"
      #- "traefik.http.routers.boards.middlewares=auth" # Apply basic auth middleware
    networks:
      - external
      
  focalboard-db:
    image: postgres:16
    container_name: "focalboard-db"
    restart: always
    environment:
      - POSTGRES_DB=${FB_DB_NAME}
      - POSTGRES_USER=${FB_DB_USER}
      - POSTGRES_PASSWORD=${FB_DB_PASS}
    volumes:
      - ${DATA_DIR}/pgdata:/var/lib/postgresql/data
    labels:
      - "traefik.enable=false"
    networks:
      - external
      - internal

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    volumes:
    - ${DATA_DIR}/vw-data:/data
    environment:
    #- DATABASE_URL=${VAULT_DB}
    - SIGNUPS_ALLOWED=false
    - DOMAIN=https://vault.${DOMAIN}
    - ADMIN_TOKEN=${VW_TOKEN}
    - TZ=Europe/Brussels
    - LOG_FILE=/data/logs.log
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.vaultwarden.rule=Host(`vault.${DOMAIN}`)"
    - "traefik.http.routers.vaultwarden.entrypoints=websecure"
    - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"
    - "traefik.http.routers.vaultwarden.tls=true"
    - "traefik.http.routers.vaultwarden.tls.certresolver=myresolver"
    networks:
      - external
      
  fail2ban:
    image: lscr.io/linuxserver/fail2ban:latest
    container_name: fail2ban
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      - TZ=Europe/Brussels
      - PUID=1000
      - PGID=1000
      - F2B_DB_PURGE_AGE=14d
    volumes:
      - ${DATA_DIR}/fail2ban/config:/config
      - ${DATA_DIR}/vw-data:/remotelogs/vaultwarden:ro
      - ${DATA_DIR}/mealie-data/mealie.log:/remotelogs/mealie.log:ro  
      - ${LOGS_DIR}/var/log:/var/log:ro
    restart: unless-stopped

  mealie:
    image: ghcr.io/mealie-recipes/mealie:v1.12.0 # 
    container_name: mealie
    restart: unless-stopped
    ports:
        - "9925:9000" # 
    deploy:
      resources:
        limits:
          memory: 1000M # 
    volumes:
      - ${DATA_DIR}/mealie-data:/app/data/
    environment:
      # Set Backend ENV Variables Here
      ALLOW_SIGNUP: "false"
      PUID: 1000
      PGID: 1000
      TZ: Europe/Brussels
      MAX_WORKERS: 1
      WEB_CONCURRENCY: 1
      BASE_URL: https://recipes.${DOMAIN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mealie.rule=Host(`recipes.${DOMAIN}`)"
      - "traefik.http.routers.mealie.entrypoints=websecure"
      - "traefik.http.routers.mealie.tls=true"
      - "traefik.http.routers.mealie.tls.certresolver=myresolver"
    networks:
      - external

  glance:
    image: glanceapp/glance
    container_name: glance
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_DIR}/glance/config:/app/config
      - ${DATA_DIR}/glance/assets:/app/assets
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.glance.rule=Host(`feed.${DOMAIN}`)"
      - "traefik.http.routers.glance.entrypoints=websecure"
      - "traefik.http.routers.glance.tls=true"
      - "traefik.http.routers.glance.tls.certresolver=myresolver"
      - "traefik.http.services.glance.loadbalancer.server.port=8080"
    networks:
      - external

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    user: "0"
    volumes:
      - ${DATA_DIR}/grafana/data:/var/lib/grafana
      - ${DATA_DIR}/grafana/conf:/etc/grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    networks:
      - external
       
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - "${DATA_DIR}/prometheus/:/etc/prometheus"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.size=256MB'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.service=prometheus"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    networks:
      - external
      - internal

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

  ferdium:
    image: ferdium/ferdium-server:latest
    container_name: ferdium
    environment:
      - NODE_ENV=production
      - APP_URL="https://ferdium.${DOMAIN}"
      - DB_CONNECTION=sqlite
      - DB_HOST=127.0.0.1
      - DB_PORT=3306
      - DB_USER=${FERDIUM_DB_USER}
      - DB_PASSWORD=${FERDIUM_DB_AUTH}
      - DB_DATABASE=ferdium
      - DB_SSL=false
      - MAIL_CONNECTION=smtp
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - MAIL_SSL=false
      - MAIL_USERNAME=${SMTP_EMAIL}
      - MAIL_PASSWORD=${FERDIUM_SMTP_PSWD}
      - MAIL_SENDER=${SMTP_EMAIL}
      - IS_CREATION_ENABLED=true
      - IS_DASHBOARD_ENABLED=true
      - IS_REGISTRATION_ENABLED=false
      - CONNECT_WITH_FRANZ=false
      - DATA_DIR=/data
      - JWT_USE_PEM=true
    volumes:
      - ${DATA_DIR}/ferdium/db:/data
      - ${DATA_DIR}/ferdium/recipes:/app/build/recipes
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ferdium.rule=Host(`ferdium.${DOMAIN}`)"
      - "traefik.http.routers.ferdium.entrypoints=websecure"
      - "traefik.http.routers.ferdium.tls=true"
      - "traefik.http.routers.ferdium.tls.certresolver=myresolver"
      - "traefik.http.services.ferdium.loadbalancer.server.port=3333"
    networks:
      - external
      
volumes:
  data:
  vw-data:
  focalboard:
  mealie-data:

networks:
  external:
   # external: true
  internal:
